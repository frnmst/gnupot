# SOME IDEAS FOR A BETTER FILE CONFLICT RESOLVER FUNCTION.
#
#       if [ "$returnedVal" -eq 1 ]; then
#               notifyCmd "Resolving file conflicts." \
#"$gnupotDefaultNotificationTime"

                # SOME IDEAS.
                # Server and clients have master and tmp branches.
                # If there is no problems, branches are equal.
                # Otherwise:
                #
                # git pull origin tmp
                # <compare master & tmp branches: get conflicting files list>
                # <move master files>
                # git checkout ??-b?? tmp # change to tmp branch
                # <move tmp files>
                # <merge branches in master branch without deleting tmp branch>
                # git push origin master
                # git push origin tmp
                # END OF SOME IDEAS.

                # IT DOES NOT WORK BUT THIS IS THE previous IDEA:
                # get file conflict list
                #conflictList=$(git diff --name-only --diff-filter=U)
                # Create locally tmp branch if it doen not exist.
                #git checkout -b tmp
                #for conflict in $conflictList; do
                        # move conflicting files to new names
                #       mv "$conflict" "$conflict"."$REMOTE_USR"."$DATE"
                #done
                #git commit -a -m "??resolved??"
                # change to master branch
                #git checkout master
                #for conflict in $conflictList; do
                        # move conflicting files to new names
                #       mv "$conflict" "$conflict"."$REMOTE_USR"."$DATE"
                #done
                # tmp U master
                #git merge tmp

                #if [ "$action" == "push" ]; then
                        #git push origin master
                #else
                #       :
                #fi

                #notifyCmd "File conflicts resolved." \
#"$gnupotDefaultNotificationTime"

#               echo 1
#       fi

#       echo 0

